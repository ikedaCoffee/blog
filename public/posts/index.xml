<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on 30s_engineer</title>
		<link>https://blog.over-30-engineer.xyz/posts/</link>
		<description>Recent content in Posts on 30s_engineer</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>ja-JP</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Sat, 02 Nov 2019 15:09:12 +0900</lastBuildDate>
		<atom:link href="https://blog.over-30-engineer.xyz/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>RailsのシステムテストをCircleCIで自動で実行する</title>
			<link>https://blog.over-30-engineer.xyz/posts/docker-basics/</link>
			<pubDate>Sat, 02 Nov 2019 15:09:12 +0900</pubDate>
			
			<guid>https://blog.over-30-engineer.xyz/posts/docker-basics/</guid>
			<description>Windows10でRailsのシステムテストの環境構築 最近職場で、社内用Webアプリのテストコードを書いている。Railsで作られていて、</description>
			<content type="html"><![CDATA[

<h2 id="windows10でrailsのシステムテストの環境構築">Windows10でRailsのシステムテストの環境構築</h2>

<p>最近職場で、社内用Webアプリのテストコードを書いている。Railsで作られていて、テストフレームワークはデフォルトのMinitestを使用している。前の職場ではテストコードを書く文化がなく、テストコードを記述させてもらえてありがたく思っている。</p>

<p>今はシステムテストを書いていて、Seleniumを使った自動UIテストをしている。ブラウザをテストコードで自在に操るのはなかなかに楽しい。</p>

<p>Windows10 Proで開発をしていて、WSL上にRails環境を構築して作業をしていた。特に困ることはなかったのだけれど、システムテストだけはWSL環境が原因で躓いた。</p>

<p>当たり前だけど、システムテストにはブラウザが必要だ。でも、WSL内にはブラウザが入っていない。WSL内にchromeをインストールしようと試みたけど、動作が安定せずに断念した。システムテストの環境構築がWSLだとできない&hellip;。さて、どうしたものか。なかなかに悪戦苦闘したので、その解決策を記録しておく。</p>

<p>解決策は2つ記述した。解決策1は、WSL環境のまま、Windowsにインストールされているchromeを使用する方法だ。解決策2はWSLを使用せず、Docker for Windowsで開発環境を構築する方法である。</p>

<h2 id="windowsにインストールされているブラウザを使用する">Windowsにインストールされているブラウザを使用する</h2>

<p>WSLを使用し続けるのであれば、Windowsにインストールされているブラウザを使用するのがよいと思う。自分がやった作業は以下の通り。使用するブラウザはChromeなので、他のブラウザを使用する場合は知らない。けど、まあ、似たような設定でいけると思う。</p>

<p>環境: WSL (Ubuntu 18.04) / Rails: 5.2系 / Ruby: 2.5系</p>

<ol>
<li><p>Chromeを開いてバージョンを調べる。</p>

<ol>
<li>右上の点が3つ縦に並んでいるボタンをクリック。</li>
<li>ヘルプをクリック</li>
<li>Google Chromeについてをクリック</li>
<li><code>バージョン: 78.0.3904.87</code> などと書いてあるので、このバージョン (78) を覚えておく。</li>
</ol></li>

<li><p>バージョンにあったChromeDriverをインストールする。</p></li>
</ol>

<p><a href="https://chromedriver.chromium.org/downloads">こちら</a>からインストールできる。最初の二桁、つまり<code>バージョン: 78.0.3904.87</code> なら、78のもので新しいものを選べばよい。</p>

<ol>
<li>インストールしたchromedriver.exeを適当な場所に置く。</li>
</ol>

<p>例えば、<code>C:\Program Files\chromedriver_win32\chromedriver.exe</code></p>

<ol>
<li><code>/test/application_system_test_case.rb</code> でchromedriverの場所を指定する。</li>
</ol>

<p>3の場所に置いたなら、↓のように記述すればよい。</p>
<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby">   <span class="nb">require</span> <span class="s1">&#39;test_helper&#39;</span>
   <span class="c1"># 下記を追加</span>
   <span class="no">Selenium</span><span class="o">::</span><span class="no">WebDriver</span><span class="o">::</span><span class="no">Chrome</span><span class="o">::</span><span class="no">Service</span><span class="o">.</span><span class="n">driver_path</span> <span class="o">=</span> <span class="s1">&#39;/mnt/c/Program Files/chromedriver_win32/chromedriver.exe&#39;</span>

   <span class="k">class</span> <span class="nc">ApplicationSystemTestCase</span> <span class="o">&lt;</span> <span class="no">ActionDispatch</span><span class="o">::</span><span class="no">SystemTestCase</span>
     <span class="n">driven_by</span> <span class="ss">:selenium</span><span class="p">,</span> <span class="ss">using</span><span class="p">:</span> <span class="ss">:chrome</span><span class="p">,</span> <span class="ss">screen_size</span><span class="p">:</span> <span class="o">[</span><span class="mi">1400</span><span class="p">,</span> <span class="mi">1400</span><span class="o">]</span>
   <span class="k">end</span></code></pre></div>
<ol>
<li>Capybaraのバージョンを3.17以上にする。</li>
</ol>

<p>Gemfileを開いて、<code>gem 'capybara', '~&gt; 2.13'</code>などと記述されている箇所を<code>gem 'capybara', '~&gt; 3.17'</code>に変更する。</p>
<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby">   <span class="o">-</span> <span class="n">gem</span> <span class="s1">&#39;capybara&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.13&#39;</span>
   <span class="o">+</span> <span class="n">gem</span> <span class="s1">&#39;capybara&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.17&#39;</span></code></pre></div>
<p>変更したら、忘れずに<code>bundle install</code>をすること。</p>

<p>以上である。これで、システムテストを記述して、<code>rails test:system</code>と実行すれば、chromeが立ち上がって、自動でUIテストがはじまる。Seleniumを使ったことがなかった自分のような人にとっては、なかなかに面白いものがみれると思う。</p>

<h2 id="docker-for-windowsで開発環境を構築する">Docker for Windowsで開発環境を構築する</h2>

<p>ローカルの環境だけでテストをするのであれば、Windows環境のブラウザを使ってテストをすれば良い。だが、CircleCIなどで自動でシステムテストを行ってチェックをしたいという場合、どうすればよいのだろうか？Docker使えばいけるよとアドバイスをもらったので、そうすることにした。Dockerのイメージで、ブラウザが入ったものを使用できるとのこと。</p>

<ol>
<li>Docker for Windowsをインストールする</li>
</ol>

<p>Docker for Windowsのインストールは<a href="https://docs.docker.com/docker-for-windows/install/">公式サイト(英語)</a>を参考にすればいけると思う。簡略化すると、以下の通り。</p>

<ol>
<li>Windows10 Proの設定で、Hiper-Vを有効化する。</li>
<li><a href="https://hub.docker.com/?overlay=onboarding">こちら</a>からDocker Desktop for WIndowsをインストール。</li>
</ol>

<p>英語だけど、読み進めながら進めるのが無難かと思う。</p>

<ol>
<li><p>Docker Hubから<code>CircleCI/ruby</code>イメージを探し出す</p>

<ol>
<li><a href="https://hub.docker.com/">Docker Hub</a>にアクセスする。</li>
<li><code>circleci/ruby</code>と検索する。もしくは、直接<a href="https://hub.docker.com/r/circleci/ruby">こちら</a>にアクセスする。</li>
<li><code>Tags</code>を選択</li>
<li>Tagsの検索部分で、<code>2.5.7-node-browsers</code>と検索する。<code>2.5.7</code>は自分が使用しているRubyのバージョン。<code>node</code>はNode .jsを含める場合。Rails使う場合はこれを含めておいた方が無難そう。そして大事なのが<code>browsers</code>の部分。これだけでChromeやFirefoxのブラウザ環境が入った環境を構築できる。</li>
<li>今回、自分の使用するイメージは<code>circleci/ruby:2.5.7-node-browsers</code>ということになる。
<br /></li>
</ol></li>

<li><p>Dockerfileおよびdocker-compose.ymlの作成</p></li>
</ol>

<p>自分の場合、すでに作成済のrailsアプリを動かすために、railsアプリ配下に下記のような構成でDockerfileとdocker-compose.ymlを作成した。どちらもrailsのルートディレクトリ直下に置いた。</p>

<ul>
<li><p>Dockerfile</p>
<div class="highlight"><pre class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="k">FROM</span><span class="s"> circleci/ruby:2.5.7-node-browsers</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> apt-get update -qq <span class="o">&amp;&amp;</span> apt-get install -y build-essential libpq-dev<span class="err">
</span><span class="err"></span><span class="k">RUN</span> mkdir /railsアプリ名<span class="err">
</span><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /railsアプリ名</span><span class="err">
</span><span class="err"></span>COPY . /railsアプリ名/<span class="err">
</span><span class="err"></span><span class="k">RUN</span> gem install bundler<span class="err">
</span><span class="err"></span><span class="k">RUN</span> bundle install</code></pre></div></li>

<li><p>Docker-compose.yml</p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml">version<span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span><span class="w"></span>services<span class="p">:</span><span class="w">
</span><span class="w"> </span>db<span class="p">:</span><span class="w">
</span><span class="w">   </span>image<span class="p">:</span><span class="w"> </span>postgres<span class="p">:</span><span class="m">12.1</span><span class="w">
</span><span class="w">   </span>volumes<span class="p">:</span><span class="w">
</span><span class="w">     </span>-<span class="w"> </span>postgres_data<span class="p">:</span>/var/lib/postgresql/data<span class="w">
</span><span class="w"> </span>web<span class="p">:</span><span class="w">
</span><span class="w">   </span>build<span class="p">:</span><span class="w"> </span>.<span class="w">
</span><span class="w">   </span>volumes<span class="p">:</span><span class="w">
</span><span class="w">     </span>-<span class="w"> </span>.<span class="p">:</span>/railsアプリ名<span class="w">
</span><span class="w">   </span>ports<span class="p">:</span><span class="w">
</span><span class="w">     </span>-<span class="w"> </span><span class="s2">&#34;3000:3000&#34;</span><span class="w">
</span><span class="w">   </span>depends_on<span class="p">:</span><span class="w">
</span><span class="w">     </span>-<span class="w"> </span>db<span class="w">
</span><span class="w"></span>volumes<span class="p">:</span><span class="w">
</span><span class="w"> </span>postgres_data<span class="p">:</span><span class="w"> </span>{}</code></pre></div></li>
</ul>

<ol>
<li><p>railsのルートディレクトリ直下で下記を実行</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">&gt; docker-compose build
&gt; docker-compose up -d
&gt; docker-compose <span class="nb">exec</span> app rails db:create db:migrate</code></pre></div></li>

<li><p>対象のコンテナにアタッチしてシステムテストを試してみる</p></li>
</ol>

<p><code>docker ps</code>コマンドで、起動中のコンテナを確認すると、下記のような状態になっているはず。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">   &gt; docker ps
   ... NAMES
   ... railsアプリ名_web_1
   ... railsアプリ名_db_1</code></pre></div>
<p>下記を実行してコンテン内に入る。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">   &gt; docker <span class="nb">exec</span> -it railsアプリ名_web_1 /bin/sh</code></pre></div>
<p>Railsアプリのルーディレクトリに移動して、システムテストを試す。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">   $ rails test:system</code></pre></div>
<p>テストが実行されればOK。</p>
]]></content>
		</item>
		
		<item>
			<title>ルーターとスイッチとIPアドレスとMACアドレスについて</title>
			<link>https://blog.over-30-engineer.xyz/posts/router-switch-ip-mac/</link>
			<pubDate>Fri, 27 Sep 2019 01:18:52 +0900</pubDate>
			
			<guid>https://blog.over-30-engineer.xyz/posts/router-switch-ip-mac/</guid>
			<description>ネットワークの知識がなさすぎて友達に相談したところ、色々なことを教えてくれた。友達には、まじで感謝している。教わったことを自分なりにまとめて</description>
			<content type="html"><![CDATA[

<p>ネットワークの知識がなさすぎて<a href="http://interier.hatenablog.com/">友達</a>に相談したところ、色々なことを教えてくれた。友達には、まじで感謝している。教わったことを自分なりにまとめてみた。メモのような感じなので、他の人が読んだところで理解はできないかもしれない。自分が記述したので間違いも多いかもしれない</p>

<h2 id="osi参照モデル-通信の層">OSI参照モデル (通信の層)</h2>

<table>
<thead>
<tr>
<th>OSI参照モデル</th>
</tr>
</thead>

<tbody>
<tr>
<td>7.  <a href="https://ja.wikipedia.org/wiki/アプリケーション層">アプリケーション層</a><br /></td>
</tr>

<tr>
<td>6.  <a href="https://ja.wikipedia.org/wiki/プレゼンテーション層">プレゼンテーション層</a><br /></td>
</tr>

<tr>
<td>5.  <a href="https://ja.wikipedia.org/wiki/セッション層">セッション層</a><br /></td>
</tr>

<tr>
<td>4.  <a href="https://ja.wikipedia.org/wiki/トランスポート層">トランスポート層</a><br />セグメント(パケットのようなもの)</td>
</tr>

<tr>
<td>3.  <a href="https://ja.wikipedia.org/wiki/ネットワーク層">ネットワーク層</a><br />パケット<br />IPアドレス<br />ルーター(IPアドレスが理解できる)</td>
</tr>

<tr>
<td>2.  <a href="https://ja.wikipedia.org/wiki/データリンク層">データリンク層</a><br />フレーム(パケットのようなもの)<br />ブロードキャスト(同じネットワーク範囲内で行われる)<br />スイッチ(MACアドレスしか理解できない)<br />MACアドレス(NIC)<br />ARPテーブル = 送信先IPアドレスと送信先MACアドレス両方の情報</td>
</tr>

<tr>
<td>1.  <a href="https://ja.wikipedia.org/wiki/物理層">物理層</a><br />ケーブル<br />ハブ</td>
</tr>
</tbody>
</table>

<h2 id="スイッチについて">スイッチについて</h2>

<ol>
<li>ハブに6台くらいのPC繋いでるとする。リクエストはハブを経由して6台に全部送られる(ブローキャスト)</li>
<li>複数のPCがリクエストを送るとリクエスト同士がコリジョンを起こす(コリジョン・ドメイン)</li>
<li>ハブの代わりにスイッチを使う</li>
<li>スイッチを経由して、ARPリクエストをブロードキャストする(全部の繋がってるPCにARPリクエストが飛ぶ、ブロードキャスト・ドメイン)</li>
<li>ARPリプライは指定したIPのMACアドレスのみから送られてくる</li>
<li>MACアドレスがわかったのでNICが識別される</li>
<li>スイッチの場合、ネットワーク部が違うと通信できない</li>
<li>スイッチングはどのようにスイッチするか</li>
</ol>

<h2 id="ルーターについて">ルーターについて</h2>

<ol>
<li>スイッチを外して、ルーターのみで通信するとする(例えば6台)</li>
<li>ネットワーク部が違くても通信できる</li>
<li>例えば、192.168.1.1/24と192.168.2.1/24はネットワークが異なる</li>
<li>192.168.1.1/24のブロードキャスト・ドメインは192.168.1.255</li>
<li>違うネットワーク同士をつなぐのがルーター</li>
<li>コリジョン・ドメインを分けることもできる</li>
</ol>

<h2 id="ルーターが原因でpingが飛ばない場合">ルーターが原因でpingが飛ばない場合</h2>

<ol>
<li>TTLは生存時間(経由したルーターの数のようなもの)</li>
<li>途中でルーターが不具合を起こした場合にPingが帰ってこない</li>
<li>経由しているルーターの道筋をトレースルート(Windowsだとトレーサートというらしい)</li>
<li>ルーティングはルーターがどのルートを通っていくか</li>
</ol>

<h2 id="l2スイッチとl3スイッチ">L2スイッチとL3スイッチ</h2>

<ol>
<li>L2スイッチはレイヤー2で動く機器(MACアドレスのみを理解する)</li>
<li>L3スイッチはレイヤー3で動く機器(MACアドレスもIPアドレスも理解する)</li>
</ol>

<h2 id="vlan">VLAN</h2>

<p>VLANを使えば、ブロードキャストドメインを分けることができる</p>

<h2 id="dhcp-dynamic-host-configuration-protocol">DHCP(Dynamic Host Configuration Protocol)</h2>

<p>IPアドレスを自動で割り振る。設定をONとOFFにすることができる</p>

<h2 id="ネットワークを勉強するに当たって参照すべきサイト">ネットワークを勉強するに当たって参照すべきサイト</h2>

<p><a href="http://www5e.biglobe.ne.jp/aji/3min/">http://www5e.biglobe.ne.jp/aji/3min/</a></p>

<p>特に24回目は参考になると紹介されたが、0回〜81回まで全部読んどけと友達に紹介してもらった</p>
]]></content>
		</item>
		
		<item>
			<title>AWSのIAMについて</title>
			<link>https://blog.over-30-engineer.xyz/posts/aws-iam/</link>
			<pubDate>Thu, 22 Aug 2019 05:07:48 +0900</pubDate>
			
			<guid>https://blog.over-30-engineer.xyz/posts/aws-iam/</guid>
			<description>現在、AWSの資格を取ろうと思い、目下勉強中だ。今回はとりあえず、IAMについてまとめる。下記のUdemyのコースを受講しているのでこちらの</description>
			<content type="html"><![CDATA[<p>現在、AWSの資格を取ろうと思い、目下勉強中だ。今回はとりあえず、IAMについてまとめる。下記のUdemyのコースを受講しているのでこちらの講義から引用などをさせていただく。</p>

<p><a href="https://www.udemy.com/aws-and-infra/">AWS：ゼロから実践するAmazon Web Services。手を動かしながらインフラの基礎を習得</a></p>

<p>AWSのサービスにIAMというのがある。</p>

<p>IAMはAWS Identity and Access Managementの略。アイアムと読む人が多い。</p>

<p><a href="https://aws.amazon.com/jp/iam/">https://aws.amazon.com/jp/iam/</a></p>

<blockquote>
<p>AWS のサービスやリソースへのアクセスを安全に管理できます。IAM を使用すると、AWS のユーザーとグループを作成および管理し、アクセス権を使用して AWS リソースへのアクセスを許可および拒否できます。</p>
</blockquote>

<p>覚えるべき用語があって、下記の4つ。</p>

<ol>
<li><code>ポリシー</code></li>
<li><code>ユーザー</code></li>
<li><code>グループ</code></li>
<li><code>ロール</code></li>
</ol>

<p>それぞれ解説する↓。</p>

<ol>
<li><code>ポリシー</code>は、アクセス許可の定義。「どのAWSサービスの」「どのリソースに対して」「どんな操作を」「許可するor許可しない」を定義する。</li>
<li><code>ユーザー</code>は、個々のアカウントのユーザー。</li>
<li><code>グループ</code>は、IAMユーザーの集合。複数のユーザーにアクセス許可を付与する作業を簡素化する。</li>
<li><code>ロール</code>は、一時的にアクセスを許可したアカウントを発行できる。EC2やLambdaなどのAWSリソースに権限を付与するために使用。</li>
</ol>

<p><code>ユーザー</code>や<code>グループ</code>はLinuxのそれと似ているのでわかりやすい。<code>ポリシー</code>もそれらを使用してユーザーへの権限管理を行うものなのだと理解できる。</p>

<p><code>ロール</code>だけ少しわかりにくいかもしれない。ユーザーやポリシーを使用してアクセス許可などをすると永続的にアクセスを許可することになったりする。どうしてもセキュアとは言い切れない状態となってしまう。<code>ロール</code>という機能があることにより、一時的にのみ権限を付与することが可能になるため、永続的に権限を許可することに比べて、よりセキュアな状態であると言える。そういった状態を作るために<code>ロール</code>はあるみたいだ。</p>
]]></content>
		</item>
		
	</channel>
</rss>
