<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on 30s_engineer</title>
		<link>https://blog.over-30-engineer.xyz/posts/</link>
		<description>Recent content in Posts on 30s_engineer</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>ja-JP</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Tue, 17 Dec 2019 15:06:05 +0900</lastBuildDate>
		<atom:link href="https://blog.over-30-engineer.xyz/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>jQuery入門</title>
			<link>https://blog.over-30-engineer.xyz/posts/jquery/</link>
			<pubDate>Tue, 17 Dec 2019 15:06:05 +0900</pubDate>
			
			<guid>https://blog.over-30-engineer.xyz/posts/jquery/</guid>
			<description>ProgateでjQueryを勉強したときの自分用のメモです。かなり基礎的な内容です。 高速化のためにできること 同じjQueryオブジェクトを</description>
			<content type="html"><![CDATA[<p><a href="https://prog-8.com/languages/jquery">Progate</a>でjQueryを勉強したときの自分用のメモです。かなり基礎的な内容です。</p>
<h2 id="heading">高速化のためにできること</h2>
<ul>
<li>
<p>同じjQueryオブジェクトを複数回使用する時は変数にする。</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">$div</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span><span class="p">;</span>
</code></pre></div></li>
<li>
<p>同じjQueryオブジェクトを複数回使用する時は、メソッドチェーンを使うことでも処理速度を高速化できる。 $(&lsquo;セレクタ&rsquo;).メソッド().メソッド()&hellip;のように書くこと 。</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;color&#39;</span><span class="p">,</span> <span class="s1">&#39;red&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;jQuery&#39;</span><span class="p">)</span><span class="p">;</span>
</code></pre></div></li>
</ul>
<h2 id="heading-1">知識</h2>
<ul>
<li>
<p>jQueryはHTMLの中身を操作するため、HTMLの読み込みが完了してからjQueryによる操作を開始するようにする。 そのためにはreadyイベントを使用し、<code>$(document).ready()</code>の中身にjQueryの処理を書いていく。 この構文には省略形も用意されており、<code>$(function(){ });</code>と書くことも出来る。</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">)</span><span class="p">.</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// この中にjQueryの処理を書く
</span><span class="c1"></span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// この中にjQueryの処理を書く
</span><span class="c1"></span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
</code></pre></div></li>
<li>
<p>HTMLのタグには<code>class</code>や<code>id</code>、<code>src</code>といったものを指定できるが、これらを属性と呼ぶ。</p>
</li>
</ul>
<h2 id="--">メソッド / イベント</h2>
<ul>
<li>
<p><code>find</code>メソッドは、すべての子孫要素(自分よりも下の階層の要素すべて）の中から、指定したセレクタを持つ要素を取得したいときに用いる。</p>
</li>
<li>
<p><code>children</code>メソッドは、指定したセレクタが持つ子要素（一階層だけ下）の中から指定したセレクタに合致した要素を取得したいときに用いる。</p>
</li>
<li>
<p><code>css</code>メソッドは、CSSを変更できるメソッド。1つ目の引数にCSSのプロパティを、2つ目の引数にプロパティの値をいれる。二つ目の引数がない場合は、CSSのプロパティの値を取得する。</p>
</li>
<li>
<p><code>html</code>メソッドは、要素の中身のHTMLを書き換えることが出来る。textメソッドと違い、htmlメソッドの引数は、単なる文字列ではなくHTMLだということである。引数がない場合は、要素の中身のHTMLを取得する。</p>
</li>
<li>
<p><code>text</code>メソッドは、<code>$('セレクタ').text('書き換える文字列');</code>のように記述して、要素内の文字列を「セット」することができる。<code>text</code>メソッドは引数を指定せずに用いることで、要素内の文字列を「ゲット」することもできる。</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">h1</span><span class="p"></span><span class="p">&gt;</span>おはよう<span class="p">&lt;</span><span class="p">/</span><span class="nt">h1</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">p</span><span class="p"></span><span class="p">&gt;</span>さようなら<span class="p">&lt;</span><span class="p">/</span><span class="nt">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span><span class="p"></span><span class="p">&gt;</span>
  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;こんばんは&#39;</span><span class="p">)</span> <span class="c1">// h1要素内(おはよう)を引数の文字列(こんばんは)で変更
</span><span class="c1"></span>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="p">)</span><span class="p">;</span> <span class="c1">// p要素内の文字列(さようなら)を取得
</span><span class="c1"></span><span class="p">&lt;</span><span class="p">/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></div></li>
<li>
<p>HTMLの属性は<code>attr</code>メソッドを用いて「ゲット」と「セット」ができる。例えば、<code>attr('id', 'title')</code>のように第一引数に属性名、第二引数にその属性値を指定することで属性をセットすることができる。そして、第二引数を指定しない場合は、その属性の値を取得できる。</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">h1</span><span class="p"></span><span class="p">&gt;</span>こんにちは<span class="p">&lt;</span><span class="p">/</span><span class="nt">h1</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://www.google.co.jp&#34;</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">a</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span><span class="p"></span><span class="p">&gt;</span>
  <span class="c1">// h1要素にtitleというidをセット
</span><span class="c1"></span>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;title&#39;</span><span class="p">)</span><span class="p">;</span>
  <span class="c1">// a要素のhref属性の値(https://www.google.co.jp)をゲット
</span><span class="c1"></span>  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">)</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></div></li>
<li>
<p><code>hover</code>イベント</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;$id&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">hover</span><span class="p">(</span>
  <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// マウスをのせた時の処理
</span><span class="c1"></span>  <span class="p">}</span><span class="p">,</span>
  <span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// マウスが外れた時の処理
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">)</span><span class="p">;</span>
</code></pre></div></li>
<li>
<p><code>addClass</code>メソッドを用いると、指定した要素にクラスを追加することができる。</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.text-contents&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;text-active&#39;</span><span class="p">)</span><span class="p">;</span>
</code></pre></div></li>
<li>
<p><code>removeClass</code>メソッドを用いると、指定した要素から指定したクラスを取り除くことができる。</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.text-contents&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;text-active&#39;</span><span class="p">)</span><span class="p">;</span>
</code></pre></div></li>
<li>
<p><code>hasClass</code>メソッドは、引数に指定したクラスを、オブジェクトが持っているか判定するときに使用する。 オブジェクトがそのクラスを持っていれば<code>true</code>、持っていなければ<code>false</code>を返す。</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;answer1&#34;</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;answer2 open&#34;</span><span class="p"></span><span class="p">&gt;</span><span class="p">&lt;</span><span class="p">/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span><span class="p"></span><span class="p">&gt;</span>
  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.answer1&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span><span class="s1">&#39;open&#39;</span><span class="p">)</span><span class="p">;</span> <span class="c1">// false
</span><span class="c1"></span>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.answer2&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span><span class="s1">&#39;open&#39;</span><span class="p">)</span><span class="p">;</span> <span class="c1">// true
</span><span class="c1"></span><span class="p">&lt;</span><span class="p">/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></div></li>
<li>
<p><code>show</code>メソッドは要素を表示させる。</p>
<p><code>hide</code>メソッドは要素を非表示させる。</p>
</li>
<li>
<p><code>slideDown</code>メソッドは要素を表示させる。</p>
<p><code>slideUp</code>メソッドは要素を非表示させる。</p>
</li>
<li>
<p><code>fadeIn</code>メソッドは要素を表示させる。</p>
<p><code>fadeOut</code>メソッドは要素を非表示させる。</p>
</li>
<li>
<p><code>eq</code>メソッドを用いると、jQueryオブジェクトの中から、<code>eq</code>の引数の数字と同じインデックス番号の要素を取得できる。</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">ul</span><span class="p"></span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p"></span><span class="p">&gt;</span>インデックス0<span class="p">&lt;</span><span class="p">/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p"></span><span class="p">&gt;</span>インデックス1<span class="p">&lt;</span><span class="p">/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p"></span><span class="p">&gt;</span>インデックス2<span class="p">&lt;</span><span class="p">/</span><span class="nt">li</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">ul</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span><span class="p"></span><span class="p">&gt;</span>
  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">eq</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="p">)</span><span class="p">;</span> <span class="c1">// インデックス2
</span><span class="c1"></span><span class="p">&lt;</span><span class="p">/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></div></li>
<li>
<p><code>index</code>メソッドを用いると、↓のコードのように「li」要素の中の「.active」要素のインデックス番号（1）を取得できる。</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">ul</span><span class="p"></span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p"></span><span class="p">&gt;</span>リスト0<span class="p">&lt;</span><span class="p">/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;active&#34;</span><span class="p"></span><span class="p">&gt;</span>リスト1<span class="p">&lt;</span><span class="p">/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p"></span><span class="p">&gt;</span>リスト2<span class="p">&lt;</span><span class="p">/</span><span class="nt">li</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">ul</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span><span class="p"></span><span class="p">&gt;</span>
  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">index</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.active&#39;</span><span class="p">)</span><span class="p">)</span><span class="p">;</span> <span class="c1">// 1
</span><span class="c1"></span><span class="p">&lt;</span><span class="p">/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></div><p><code>click</code>イベントの中では、<code>$(this)</code>にはクリックした要素が入っている。それを<code>index</code>メソッドの引数に指定することで、クリックした要素のインデックス番号を取得することができる。</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">ul</span><span class="p"></span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p"></span><span class="p">&gt;</span>リスト0<span class="p">&lt;</span><span class="p">/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p"></span><span class="p">&gt;</span>リスト1<span class="p">&lt;</span><span class="p">/</span><span class="nt">li</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">li</span><span class="p"></span><span class="p">&gt;</span>リスト2<span class="p">&lt;</span><span class="p">/</span><span class="nt">li</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">ul</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span><span class="p"></span><span class="p">&gt;</span>
  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">index</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="p">)</span><span class="p">;</span> <span class="c1">// クリックしたli要素のインデックス番号が代入される
</span><span class="c1"></span>  <span class="p">}</span><span class="p">)</span><span class="p">;</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></div></li>
<li>
<p><code>prev</code>メソッドは、jQueryオブジェクトの兄弟要素（同じ階層の要素）の中から一つ前の要素を、</p>
<p><code>next</code>メソッドは一つ後ろの要素を取得することができる。</p>
</li>
<li>
<p><code>val</code>メソッド。 <code>input</code>タグを用いると一行の入力欄を作ることができる。<code>input</code>タグに入力されている値は、<code>val</code>メソッドで取得できる。</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">form</span><span class="p"></span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span><span class="p"></span><span class="p">&gt;</span>名前:<span class="p">&lt;</span><span class="p">/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;name&#34;</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span><span class="p"></span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">form</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span><span class="p"></span><span class="p">&gt;</span>
  <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#name&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="p">)</span><span class="p">;</span> <span class="c1">// フォームに入力した値が取得できる
</span><span class="c1"></span><span class="p">&lt;</span><span class="p">/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></div></li>
<li>
<p><code>submit</code>イベント。フォームが送信されたときのイベントとして、<code>submit</code>イベントがある。<code>submit</code>イベントを用いると、送信ボタンがクリックされたときだけでなく、「Enter」キーでフォームが送信された場合もイベントが発生する。</p>
</li>
<li>
<p><code>animate</code>メソッドを用いてアニメーションをつけることができる。<code>$('セレクタ').animate({'プロパティ':'値'})</code>のように、引数は連想配列で指定する。
2つ目の引数でアニメーションの時間を設定することができる。時間はミリ秒で指定するか、&lsquo;slow'や'fast'といった文字列で指定することができる。</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">animate</span><span class="p">(</span><span class="p">{</span>
  <span class="s1">&#39;font-size&#39;</span><span class="o">:</span> <span class="s1">&#39;50px&#39;</span>
<span class="p">}</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><p><code>animate</code>メソッドでは、CSSの値だけでなく、<code>scrollTop</code>などの値も変更できる。</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;html, body&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">animate</span><span class="p">(</span><span class="p">{</span><span class="s1">&#39;scrollTop&#39;</span><span class="o">:</span> <span class="mi">0</span><span class="p">}</span><span class="p">,</span> <span class="nx">時間</span><span class="p">)</span><span class="p">;</span>
</code></pre></div></li>
<li>
<p><code>scrollTop</code>メソッドは、<code>$('html, body').scrollTop(値);</code> のように指定し、ページ最上部から<code>値px</code>の位置に移動することができる。<code>scrollTop</code>は通常<code>$('html, body')</code>に対して用いるので、セットで覚えておくとよい。</p>
</li>
<li>
<p><code>offset</code>メソッドを使用することで、要素の表示位置を取得することができる。<code>offset</code>メソッドは、ページの上端からの距離とページの左端からの距離が連想配列の形で返ってくる。<code>offset().top</code>とすると、ページの上端からの距離が取得できる。</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// h1要素の表示位置を取得
</span><span class="c1"></span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">offset</span><span class="p">(</span><span class="p">)</span><span class="p">;</span> <span class="c1">// { top: 180, left: 100 }
</span><span class="c1"></span><span class="c1">// ページ最上部からの、h1要素の距離を取得
</span><span class="c1"></span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">offset</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">top</span><span class="p">;</span> <span class="c1">// 180
</span></code></pre></div><p>各ボタンはaタグにし、そのhref属性に飛び先のid名を指定しておく。そしてクリックしたときにattrメソッドでhref属性の値を取得し、offsetメソッドでその要素の位置を取得することでページ内リンクを実装できる。</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="c">&lt;!--</span><span class="c"> ページ内リンクの実装 </span><span class="c">--&gt;</span>
<span class="p">&lt;</span><span class="nt">a</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;scroll-btn&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#hogehoge&#34;</span><span class="p"></span><span class="p">&gt;</span>HTML<span class="p">&lt;</span><span class="p">/</span><span class="nt">a</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;hogehoge&#34;</span><span class="p"></span><span class="p">&gt;</span>ほげほげ<span class="p">&lt;</span><span class="p">/</span><span class="nt">div</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">script</span><span class="p"></span><span class="p">&gt;</span>
  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.scroll-btn&#39;</span><span class="p">)</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">)</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">position</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span><span class="p">.</span><span class="nx">offset</span><span class="p">(</span><span class="p">)</span><span class="p">.</span><span class="nx">top</span><span class="p">;</span>
  <span class="p">}</span><span class="p">)</span><span class="p">;</span>
<span class="p">&lt;</span><span class="p">/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></div></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Windows10でRailsのシステムテストの環境構築</title>
			<link>https://blog.over-30-engineer.xyz/posts/rails-systemtest-win10/</link>
			<pubDate>Sat, 14 Dec 2019 15:09:12 +0900</pubDate>
			
			<guid>https://blog.over-30-engineer.xyz/posts/rails-systemtest-win10/</guid>
			<description>最近職場で、社内用Webアプリのテストコードを書いている。Railsで作られていて、テストフレームワークはデフォルトのMinitestを使用</description>
			<content type="html"><![CDATA[<p>最近職場で、社内用Webアプリのテストコードを書いている。Railsで作られていて、テストフレームワークはデフォルトのMinitestを使用している。前の職場ではテストコードを書く文化がなく、テストコードを記述させてもらえてありがたく思っている。</p>
<p>今はシステムテストを書いていて、Seleniumを使った自動UIテストをしている。ブラウザをテストコードで自在に操るのはなかなかに楽しい。</p>
<p>Windows10 Proで開発をしていて、WSL上にRails環境を構築して作業をしていた。特に困ることはなかったのだけれど、システムテストだけはWSL環境が原因で躓いた。</p>
<p>当たり前だけど、システムテストにはブラウザが必要だ。でも、WSL内にはブラウザが入っていない。WSL内にchromeをインストールしようと試みたけど、動作が安定せずに断念した。システムテストの環境構築がWSLだとできない&hellip;。さて、どうしたものか。なかなかに悪戦苦闘したので、その解決策を記録しておく。</p>
<p>解決策は2つ記述した。解決策1は、WSL環境のまま、Windowsにインストールされているchromeを使用する方法だ。解決策2はWSLを使用せず、Docker for Windowsで開発環境を構築する方法である。</p>
<h2 id="windows">Windowsにインストールされているブラウザを使用する</h2>
<p>WSLを使用し続けるのであれば、Windowsにインストールされているブラウザを使用するのがよいと思う。自分がやった作業は以下の通り。使用するブラウザはChromeなので、他のブラウザを使用する場合は知らない。けど、まあ、似たような設定でいけると思う。</p>
<p>環境: WSL (Ubuntu 18.04) / Rails: 5.2系 / Ruby: 2.5系</p>
<ol>
<li>
<p>Chromeを開いてバージョンを調べる。</p>
<ol>
<li>右上の点が3つ縦に並んでいるボタンをクリック。</li>
<li>ヘルプをクリック</li>
<li>Google Chromeについてをクリック</li>
<li><code>バージョン: 78.0.3904.87</code> などと書いてあるので、このバージョン (78) を覚えておく。</li>
</ol>
</li>
<li>
<p>バージョンにあったChromeDriverをインストールする。</p>
<p><a href="https://chromedriver.chromium.org/downloads">こちら</a>からインストールできる。最初の二桁、つまり<code>バージョン: 78.0.3904.87</code> なら、78のもので新しいものを選べばよい。</p>
</li>
<li>
<p>インストールしたchromedriver.exeを適当な場所に置く。</p>
<p>例えば、<code>C:\Program Files\chromedriver_win32\chromedriver.exe</code></p>
</li>
<li>
<p><code>/test/application_system_test_case.rb</code> でchromedriverの場所を指定する。</p>
<p>3の場所に置いたなら、↓のように記述すればよい。</p>
<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;test_helper&#39;</span>
<span class="c1"># 下記を追加</span>
<span class="no">Selenium</span><span class="o">::</span><span class="no">WebDriver</span><span class="o">::</span><span class="no">Chrome</span><span class="o">::</span><span class="no">Service</span><span class="o">.</span><span class="n">driver_path</span> <span class="o">=</span> <span class="s1">&#39;/mnt/c/Program Files/chromedriver_win32/chromedriver.exe&#39;</span>

<span class="k">class</span> <span class="nc">ApplicationSystemTestCase</span> <span class="o">&lt;</span> <span class="no">ActionDispatch</span><span class="o">::</span><span class="no">SystemTestCase</span>
  <span class="n">driven_by</span> <span class="ss">:selenium</span><span class="p">,</span> <span class="ss">using</span><span class="p">:</span> <span class="ss">:chrome</span><span class="p">,</span> <span class="ss">screen_size</span><span class="p">:</span> <span class="o">[</span><span class="mi">1400</span><span class="o"></span><span class="p">,</span> <span class="mi">1400</span><span class="o"></span><span class="o">]</span>
<span class="k">end</span>
</code></pre></div></li>
<li>
<p>Capybaraのバージョンを3.17以上にする。</p>
<p>Gemfileを開いて、<code>gem 'capybara', '~&gt; 2.13'</code>などと記述されている箇所を<code>gem 'capybara', '~&gt; 3.17'</code>に変更する。</p>
<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="c1"># ↓を</span>
<span class="n">gem</span> <span class="s1">&#39;capybara&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.13&#39;</span>
<span class="c1"># ↓に変更</span>
<span class="n">gem</span> <span class="s1">&#39;capybara&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.17&#39;</span>
</code></pre></div><p>変更したら、忘れずに<code>bundle install</code>をすること。</p>
</li>
</ol>
<p>以上である。これで、システムテストを記述して、<code>rails test:system</code>と実行すれば、chromeが立ち上がって、自動でUIテストがはじまる。Seleniumを使ったことがなかった自分のような人にとっては、なかなかに面白いものがみれると思う。</p>
<h2 id="docker-for-windows">Docker for Windowsで開発環境を構築する</h2>
<p>ローカルの環境だけでテストをするのであれば、Windows環境のブラウザを使ってテストをすれば良い。だが、CircleCIなどで自動でシステムテストを行ってチェックをしたいという場合、どうすればよいのだろうか？Docker使えばいけるよとアドバイスをもらったので、そうすることにした。Dockerのイメージで、ブラウザが入ったものを使用できるとのこと。</p>
<ol>
<li>
<p>Docker for Windowsをインストールする</p>
<p>Docker for Windowsのインストールは<a href="https://docs.docker.com/docker-for-windows/install/">公式サイト(英語)</a>を参考にすればいけると思う。簡略化すると、以下の通り。</p>
<ol>
<li>Windows10 Proの設定で、Hiper-Vを有効化する。</li>
<li><a href="https://hub.docker.com/?overlay=onboarding">こちら</a>からDocker Desktop for WIndowsをインストール。</li>
</ol>
<p>英語だけど、読み進めながら進めるのが無難かと思う。</p>
</li>
<li>
<p>Docker Hubから<code>CircleCI/ruby</code>イメージを探し出す</p>
<ol>
<li><a href="https://hub.docker.com/">Docker Hub</a>にアクセスする。</li>
<li><code>circleci/ruby</code>と検索する。もしくは、直接<a href="https://hub.docker.com/r/circleci/ruby">こちら</a>にアクセスする。</li>
<li><code>Tags</code>を選択</li>
<li>Tagsの検索部分で、<code>2.5.7-node-browsers</code>と検索する。<code>2.5.7</code>は自分が使用しているRubyのバージョン。<code>node</code>はNode .jsを含める場合。Rails使う場合はこれを含めておいた方が無難そう。そして大事なのが<code>browsers</code>の部分。これだけでChromeやFirefoxのブラウザ環境が入った環境を構築できる。</li>
<li>今回、自分の使用するイメージは<code>circleci/ruby:2.5.7-node-browsers</code>ということになる。</li>
</ol>
</li>
<li>
<p>Dockerfileおよびdocker-compose.ymlの作成</p>
<p>自分の場合、すでに作成済のrailsアプリを動かすために、railsアプリ配下に下記のような構成でDockerfileとdocker-compose.ymlを作成した。どちらもrailsのルートディレクトリ直下に置いた。</p>
<ul>
<li>Dockerfile</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="k">FROM</span><span class="s"> circleci/ruby:2.5.7-node-browsers</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> apt-get update -qq <span class="o">&amp;&amp;</span> apt-get install -y build-essential libpq-dev<span class="err">
</span><span class="err"></span><span class="k">RUN</span> mkdir /railsアプリ名<span class="err">
</span><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /railsアプリ名</span><span class="err">
</span><span class="err"></span><span class="k">COPY</span> . /railsアプリ名/<span class="err">
</span><span class="err"></span><span class="k">RUN</span> gem install bundler<span class="err">
</span><span class="err"></span><span class="k">RUN</span> bundle install<span class="err">
</span></code></pre></div><ul>
<li>Docker-compose.yml</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml">version<span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span><span class="w"></span>services<span class="p">:</span><span class="w">
</span><span class="w">  </span>db<span class="p">:</span><span class="w">
</span><span class="w">    </span>image<span class="p">:</span><span class="w"> </span>postgres<span class="p">:</span><span class="m">12.1</span><span class="w">
</span><span class="w">    </span>volumes<span class="p">:</span><span class="w">
</span><span class="w">      </span>-<span class="w"> </span>postgres_data<span class="p">:</span>/var/lib/postgresql/data<span class="w">
</span><span class="w">  </span>web<span class="p">:</span><span class="w">
</span><span class="w">    </span>build<span class="p">:</span><span class="w"> </span>.<span class="w">
</span><span class="w">    </span>volumes<span class="p">:</span><span class="w">
</span><span class="w">      </span>-<span class="w"> </span>.<span class="p">:</span>/railsアプリ名<span class="w">
</span><span class="w">    </span>ports<span class="p">:</span><span class="w">
</span><span class="w">      </span>-<span class="w"> </span><span class="s2">&#34;3000:3000&#34;</span><span class="w">
</span><span class="w">    </span>depends_on<span class="p">:</span><span class="w">
</span><span class="w">      </span>-<span class="w"> </span>db<span class="w">
</span><span class="w"></span>volumes<span class="p">:</span><span class="w">
</span><span class="w">  </span>postgres_data<span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></code></pre></div></li>
<li>
<p>railsのルートディレクトリ直下で下記を実行</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">&gt; docker-compose build
&gt; docker-compose up -d
&gt; docker-compose <span class="nb">exec</span> app rails db:create db:migrate
</code></pre></div></li>
<li>
<p>対象のコンテナにアタッチしてシステムテストを試してみる</p>
<p><code>docker ps</code>コマンドで、起動中のコンテナを確認すると、下記のような状態になっているはず。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">&gt; docker ps
... NAMES
... railsアプリ名_web_1
... railsアプリ名_db_1
</code></pre></div><p>下記を実行してコンテン内に入る。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">&gt; docker <span class="nb">exec</span> -it railsアプリ名_web_1 /bin/sh
</code></pre></div><p>Railsアプリのルーディレクトリに移動して、システムテストを試す。</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ rails test:system
</code></pre></div><p>テストが実行されればOK。</p>
</li>
</ol>
<p>Docker環境の場合、実際にブラウザが動いているところを確認できないのが辛い。システムテストを実際に書くときは、WSL環境でWindowsのChromeを呼び出す方がよいと思う。</p>
]]></content>
		</item>
		
		<item>
			<title>ルーターとスイッチとIPアドレスとMACアドレスについて</title>
			<link>https://blog.over-30-engineer.xyz/posts/router-switch-ip-mac/</link>
			<pubDate>Fri, 27 Sep 2019 01:18:52 +0900</pubDate>
			
			<guid>https://blog.over-30-engineer.xyz/posts/router-switch-ip-mac/</guid>
			<description>ネットワークの知識がなさすぎて友達に相談したところ、色々なことを教えてくれた。友達には、まじで感謝している。教わったことを自分なりにまとめて</description>
			<content type="html"><![CDATA[<p>ネットワークの知識がなさすぎて<a href="http://interier.hatenablog.com/">友達</a>に相談したところ、色々なことを教えてくれた。友達には、まじで感謝している。教わったことを自分なりにまとめてみた。メモのような感じなので、他の人が読んだところで理解はできないかもしれない。自分が記述したので間違いも多いかもしれない</p>
<h2 id="osi-">OSI参照モデル (通信の層)</h2>
<table>
<thead>
<tr>
<th>OSI参照モデル</th>
</tr>
</thead>
<tbody>
<tr>
<td>7.  <a href="https://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E5%B1%A4">アプリケーション層</a><!-- raw HTML omitted --></td>
</tr>
<tr>
<td>6.  <a href="https://ja.wikipedia.org/wiki/%E3%83%97%E3%83%AC%E3%82%BC%E3%83%B3%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E5%B1%A4">プレゼンテーション層</a><!-- raw HTML omitted --></td>
</tr>
<tr>
<td>5.  <a href="https://ja.wikipedia.org/wiki/%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E5%B1%A4">セッション層</a><!-- raw HTML omitted --></td>
</tr>
<tr>
<td>4.  <a href="https://ja.wikipedia.org/wiki/%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B9%E3%83%9D%E3%83%BC%E3%83%88%E5%B1%A4">トランスポート層</a><!-- raw HTML omitted -->セグメント(パケットのようなもの)</td>
</tr>
<tr>
<td>3.  <a href="https://ja.wikipedia.org/wiki/%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E5%B1%A4">ネットワーク層</a><!-- raw HTML omitted -->パケット<!-- raw HTML omitted -->IPアドレス<!-- raw HTML omitted -->ルーター(IPアドレスが理解できる)</td>
</tr>
<tr>
<td>2.  <a href="https://ja.wikipedia.org/wiki/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%AF%E5%B1%A4">データリンク層</a><!-- raw HTML omitted -->フレーム(パケットのようなもの)<!-- raw HTML omitted -->ブロードキャスト(同じネットワーク範囲内で行われる)<!-- raw HTML omitted -->スイッチ(MACアドレスしか理解できない)<!-- raw HTML omitted -->MACアドレス(NIC)<!-- raw HTML omitted -->ARPテーブル = 送信先IPアドレスと送信先MACアドレス両方の情報</td>
</tr>
<tr>
<td>1.  <a href="https://ja.wikipedia.org/wiki/%E7%89%A9%E7%90%86%E5%B1%A4">物理層</a><!-- raw HTML omitted -->ケーブル<!-- raw HTML omitted -->ハブ</td>
</tr>
</tbody>
</table>
<h2 id="heading">スイッチについて</h2>
<ol>
<li>ハブに6台くらいのPC繋いでるとする。リクエストはハブを経由して6台に全部送られる(ブローキャスト)</li>
<li>複数のPCがリクエストを送るとリクエスト同士がコリジョンを起こす(コリジョン・ドメイン)</li>
<li>ハブの代わりにスイッチを使う</li>
<li>スイッチを経由して、ARPリクエストをブロードキャストする(全部の繋がってるPCにARPリクエストが飛ぶ、ブロードキャスト・ドメイン)</li>
<li>ARPリプライは指定したIPのMACアドレスのみから送られてくる</li>
<li>MACアドレスがわかったのでNICが識別される</li>
<li>スイッチの場合、ネットワーク部が違うと通信できない</li>
<li>スイッチングはどのようにスイッチするか</li>
</ol>
<h2 id="heading-1">ルーターについて</h2>
<ol>
<li>スイッチを外して、ルーターのみで通信するとする(例えば6台)</li>
<li>ネットワーク部が違くても通信できる</li>
<li>例えば、192.168.1.1/24と192.168.2.1/24はネットワークが異なる</li>
<li>192.168.1.1/24のブロードキャスト・ドメインは192.168.1.255</li>
<li>違うネットワーク同士をつなぐのがルーター</li>
<li>コリジョン・ドメインを分けることもできる</li>
</ol>
<h2 id="ping">ルーターが原因でpingが飛ばない場合</h2>
<ol>
<li>TTLは生存時間(経由したルーターの数のようなもの)</li>
<li>途中でルーターが不具合を起こした場合にPingが帰ってこない</li>
<li>経由しているルーターの道筋をトレースルート(Windowsだとトレーサートというらしい)</li>
<li>ルーティングはルーターがどのルートを通っていくか</li>
</ol>
<h2 id="l2l3">L2スイッチとL3スイッチ</h2>
<ol>
<li>L2スイッチはレイヤー2で動く機器(MACアドレスのみを理解する)</li>
<li>L3スイッチはレイヤー3で動く機器(MACアドレスもIPアドレスも理解する)</li>
</ol>
<h2 id="vlan">VLAN</h2>
<p>VLANを使えば、ブロードキャストドメインを分けることができる</p>
<h2 id="dhcpdynamic-host-configuration-protocol">DHCP(Dynamic Host Configuration Protocol)</h2>
<p>IPアドレスを自動で割り振る。設定をONとOFFにすることができる</p>
<h2 id="heading-2">ネットワークを勉強するに当たって参照すべきサイト</h2>
<p><a href="http://www5e.biglobe.ne.jp/aji/3min/">http://www5e.biglobe.ne.jp/aji/3min/</a></p>
<p>特に24回目は参考になると紹介されたが、0回〜81回まで全部読んどけと友達に紹介してもらった</p>
]]></content>
		</item>
		
		<item>
			<title>AWSのIAMについて</title>
			<link>https://blog.over-30-engineer.xyz/posts/aws-iam/</link>
			<pubDate>Thu, 22 Aug 2019 05:07:48 +0900</pubDate>
			
			<guid>https://blog.over-30-engineer.xyz/posts/aws-iam/</guid>
			<description>現在、AWSの資格を取ろうと思い、目下勉強中だ。今回はとりあえず、IAMについてまとめる。下記のUdemyのコースを受講しているのでこちらの</description>
			<content type="html"><![CDATA[<p>現在、AWSの資格を取ろうと思い、目下勉強中だ。今回はとりあえず、IAMについてまとめる。下記のUdemyのコースを受講しているのでこちらの講義から引用などをさせていただく。</p>
<p>[AWS：ゼロから実践するAmazon Web Services。手を動かしながらインフラの基礎を習得]
(<a href="https://www.udemy.com/aws-and-infra/">https://www.udemy.com/aws-and-infra/</a>)</p>
<p>AWSのサービスにIAMというのがある。</p>
<p>IAMはAWS Identity and Access Managementの略。アイアムと読む人が多い。</p>
<p><a href="https://aws.amazon.com/jp/iam/">https://aws.amazon.com/jp/iam/</a></p>
<blockquote>
<p>AWS のサービスやリソースへのアクセスを安全に管理できます。IAM を使用すると、AWS のユーザーとグループを作成および管理し、アクセス権を使用して AWS リソースへのアクセスを許可および拒否できます。</p>
</blockquote>
<p>覚えるべき用語があって、下記の4つ。</p>
<ol>
<li><code>ポリシー</code></li>
<li><code>ユーザー</code></li>
<li><code>グループ</code></li>
<li><code>ロール</code></li>
</ol>
<p>それぞれ解説する↓。</p>
<ol>
<li><code>ポリシー</code>は、アクセス許可の定義。「どのAWSサービスの」「どのリソースに対して」「どんな操作を」「許可するor許可しない」を定義する。</li>
<li><code>ユーザー</code>は、個々のアカウントのユーザー。</li>
<li><code>グループ</code>は、IAMユーザーの集合。複数のユーザーにアクセス許可を付与する作業を簡素化する。</li>
<li><code>ロール</code>は、一時的にアクセスを許可したアカウントを発行できる。EC2やLambdaなどのAWSリソースに権限を付与するために使用。</li>
</ol>
<p><code>ユーザー</code>や<code>グループ</code>はLinuxのそれと似ているのでわかりやすい。<code>ポリシー</code>もそれらを使用してユーザーへの権限管理を行うものなのだと理解できる。</p>
<p><code>ロール</code>だけ少しわかりにくいかもしれない。ユーザーやポリシーを使用してアクセス許可などをすると永続的にアクセスを許可することになったりする。どうしてもセキュアとは言い切れない状態となってしまう。<code>ロール</code>という機能があることにより、一時的にのみ権限を付与することが可能になるため、永続的に権限を許可することに比べて、よりセキュアな状態であると言える。そういった状態を作るために<code>ロール</code>はあるみたいだ。</p>
]]></content>
		</item>
		
	</channel>
</rss>
